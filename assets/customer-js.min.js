/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/sections/customer.js":
/*!******************************************!*\
  !*** ./src/scripts/sections/customer.js ***!
  \******************************************/
/***/ (() => {

eval("const selectors = {\n  customerAddresses: \"[data-customer-addresses]\",\n  addressCountrySelect: \"[data-address-country-select]\",\n  addressContainer: \"[data-address]\",\n  toggleAddressButton: \"button[aria-expanded]\",\n  cancelAddressButton: 'button[type=\"reset\"]',\n  deleteAddressButton: \"button[data-confirm-message]\",\n};\n\nconst attributes = {\n  expanded: \"aria-expanded\",\n  confirmMessage: \"data-confirm-message\",\n};\n\nclass CustomerAddresses {\n  constructor() {\n    this.elements = this._getElements();\n    if (Object.keys(this.elements).length === 0) return;\n    this._setupCountries();\n    this._setupEventListeners();\n  }\n\n  _getElements() {\n    const container = document.querySelector(selectors.customerAddresses);\n    return container\n      ? {\n          container,\n          addressContainer: container.querySelector(selectors.addressContainer),\n          toggleButtons: document.querySelectorAll(\n            selectors.toggleAddressButton\n          ),\n          cancelButtons: container.querySelectorAll(\n            selectors.cancelAddressButton\n          ),\n          deleteButtons: container.querySelectorAll(\n            selectors.deleteAddressButton\n          ),\n          countrySelects: container.querySelectorAll(\n            selectors.addressCountrySelect\n          ),\n        }\n      : {};\n  }\n\n  _setupCountries() {\n    if (Shopify && Shopify.CountryProvinceSelector) {\n      // eslint-disable-next-line no-new\n      new Shopify.CountryProvinceSelector(\n        \"AddressCountryNew\",\n        \"AddressProvinceNew\",\n        {\n          hideElement: \"AddressProvinceContainerNew\",\n        }\n      );\n      this.elements.countrySelects.forEach((select) => {\n        const formId = select.dataset.formId;\n        // eslint-disable-next-line no-new\n        new Shopify.CountryProvinceSelector(\n          `AddressCountry_${formId}`,\n          `AddressProvince_${formId}`,\n          {\n            hideElement: `AddressProvinceContainer_${formId}`,\n          }\n        );\n      });\n    }\n  }\n\n  _setupEventListeners() {\n    this.elements.toggleButtons.forEach((element) => {\n      element.addEventListener(\"click\", this._handleAddEditButtonClick);\n    });\n    this.elements.cancelButtons.forEach((element) => {\n      element.addEventListener(\"click\", this._handleCancelButtonClick);\n    });\n    this.elements.deleteButtons.forEach((element) => {\n      element.addEventListener(\"click\", this._handleDeleteButtonClick);\n    });\n  }\n\n  _toggleExpanded(target) {\n    target.setAttribute(\n      attributes.expanded,\n      (target.getAttribute(attributes.expanded) === \"false\").toString()\n    );\n  }\n\n  _handleAddEditButtonClick = ({ currentTarget }) => {\n    this._toggleExpanded(currentTarget);\n  };\n\n  _handleCancelButtonClick = ({ currentTarget }) => {\n    this._toggleExpanded(\n      currentTarget\n        .closest(selectors.addressContainer)\n        .querySelector(`[${attributes.expanded}]`)\n    );\n  };\n\n  _handleDeleteButtonClick = ({ currentTarget }) => {\n    // eslint-disable-next-line no-alert\n    if (confirm(currentTarget.getAttribute(attributes.confirmMessage))) {\n      Shopify.postLink(currentTarget.dataset.target, {\n        parameters: { _method: \"delete\" },\n      });\n    }\n  };\n}\nwindow.CustomerAddresses = CustomerAddresses;\n\n/*\n * Shopify Common JS\n *\n */\nif ((typeof window.Shopify) == 'undefined') {\n  window.Shopify = {};\n}\n\nShopify.bind = function(fn, scope) {\n  return function() {\n    return fn.apply(scope, arguments);\n  }\n};\n\nShopify.setSelectorByValue = function(selector, value) {\n  for (var i = 0, count = selector.options.length; i < count; i++) {\n    var option = selector.options[i];\n    if (value == option.value || value == option.innerHTML) {\n      selector.selectedIndex = i;\n      return i;\n    }\n  }\n};\n\nShopify.addListener = function(target, eventName, callback) {\n  target.addEventListener ? target.addEventListener(eventName, callback, false) : target.attachEvent('on'+eventName, callback);\n};\n\nShopify.postLink = function(path, options) {\n  options = options || {};\n  var method = options['method'] || 'post';\n  var params = options['parameters'] || {};\n\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", method);\n  form.setAttribute(\"action\", path);\n\n  for(var key in params) {\n    var hiddenField = document.createElement(\"input\");\n    hiddenField.setAttribute(\"type\", \"hidden\");\n    hiddenField.setAttribute(\"name\", key);\n    hiddenField.setAttribute(\"value\", params[key]);\n    form.appendChild(hiddenField);\n  }\n  document.body.appendChild(form);\n  form.submit();\n  document.body.removeChild(form);\n};\n\nShopify.CountryProvinceSelector = function(country_domid, province_domid, options) {\n  this.countryEl         = document.getElementById(country_domid);\n  this.provinceEl        = document.getElementById(province_domid);\n  this.provinceContainer = document.getElementById(options['hideElement'] || province_domid);\n\n  Shopify.addListener(this.countryEl, 'change', Shopify.bind(this.countryHandler,this));\n\n  this.initCountry();\n  this.initProvince();\n};\n\nShopify.CountryProvinceSelector.prototype = {\n  initCountry: function() {\n    var value = this.countryEl.getAttribute('data-default');\n    Shopify.setSelectorByValue(this.countryEl, value);\n    this.countryHandler();\n  },\n\n  initProvince: function() {\n    var value = this.provinceEl.getAttribute('data-default');\n    if (value && this.provinceEl.options.length > 0) {\n      Shopify.setSelectorByValue(this.provinceEl, value);\n    }\n  },\n\n  countryHandler: function(e) {\n    var opt       = this.countryEl.options[this.countryEl.selectedIndex];\n    var raw       = opt.getAttribute('data-provinces');\n    var provinces = JSON.parse(raw);\n\n    this.clearOptions(this.provinceEl);\n    if (provinces && provinces.length == 0) {\n      this.provinceContainer.style.display = 'none';\n    } else {\n      for (var i = 0; i < provinces.length; i++) {\n        var opt = document.createElement('option');\n        opt.value = provinces[i][0];\n        opt.innerHTML = provinces[i][1];\n        this.provinceEl.appendChild(opt);\n      }\n\n      this.provinceContainer.style.display = \"\";\n    }\n  },\n\n  clearOptions: function(selector) {\n    while (selector.firstChild) {\n      selector.removeChild(selector.firstChild);\n    }\n  },\n\n  setOptions: function(selector, values) {\n    for (var i = 0, count = values.length; i < values.length; i++) {\n      var opt = document.createElement('option');\n      opt.value = values[i];\n      opt.innerHTML = values[i];\n      selector.appendChild(opt);\n    }\n  }\n};\n\n//# sourceURL=webpack://shopifytheme/./src/scripts/sections/customer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/scripts/sections/customer.js"]();
/******/ 	
/******/ })()
;